[SQL Developer] - SQL문을 좀 더 편하게 작성할수있게 해주는 프로그램

[테이블] - 컬럼이라고하는 데이터주머니와 그 안에 있는 데이터들로 이루어져있다

테이블 생성은 
      create table (테이블명)(
	(컬럼명) (자료형)
	(컬럼명) (자료형)
      ); 
형식으로 한다

[테이블의 자료형]
	
숫자형)
number - 입력하는 크기 그대로
ex)1.123456 = 1.123456 

number(x,y) - x자리의 공간을 만들고 소수점아랫자리는 y까지
ex) 1.123456 = 1.12

number(x) - x자리수
ex) 1.123456 = 1

자리수를 지정해줬을때 범위를 벗어나면 오류발생

날짜형)
date - 날짜형식만 사용
datetime2 - 날짜,시간형식까지 모두 사용
sysdate - 시스템의 날짜를 가져온다 [연/월/일]
'(년)/(월)/(일)' - 사용자지정 날짜
alter session set nls_date_format = 'YYY/MM/DD HH:MI:SS'; - 날짜출력에 대한 포맷 변경
날짜형도 크기를 비교할수있다

문자형)
char(크기) - 고정길이 문자형 8000byte까지가능 100으로 고정해놓으면 3byte를 입력해도 97이 공백으로 출력된다
varchar2(크기) - 가변길이 문자형 8000byte까지 가능 100으로 고정해놓으면 3byte를 입력해도 3byte의 데이터만 저장한다
앞에 n이 붙은경우는 유니코드를 사용할수있다

기타)
PRIMARY key(컬럼명) - 중복값이 될수없는 값이다



[쿼리문]
테이블에 관련된 명령어이다

insert into (테이블명) values((데이터)); - 테이블내에 데이터를 넣는 쿼리문(컬럼 순서대로 데이터를 넣어야함)

insert into (테이블명)((컬럼명)) values((데이터)); - 원하는 컬럼에 데이터를 넣는 쿼리문

select (컬럼명) from (테이블명); - 데이터조회 (컬럼명에 * 을 넣을경우 모든 컬럼데이터를 조회할수있다)

select * from (테이블명) where (컬럼명)=(데이터); - 한개의 특정한 데이터를 갖고있는 모든 데이터를 조회할수있다

delete from (테이블명); - 테이블내의 데이터들을 모두 삭제한다

delete from (테이블명) where (컬럼명)=(데이터); - 한개의 특정한 데이터를 가진 데이터만 삭제한다

update (테이블명) set (컬럼명) =(변경할데이터) where (컬럼명) =(데이터); - 특정 데이터를 수정한다

commit; - 현재까지의 모든 내용을 저장한다

rollback; - 가장 최근 커밋한 곳으로 데이터를 되돌려 준다

desc (테이블명) - 테이블의 형식을 보여준다

alter table (테이블명) add((컬럼명) (자료형)) - 테이블에 컬럼을 추가해준다

alter table (테이블명) modify((컬럼명) (자료형)) - 테이블내의 컬럼의 자료형을 변경해준다

alter table (테이블명) RENAME COLUMN (변경 전 컬럼명) to (변경 후 컬럼명); - 컬럼의 이름을 변경해준다

alter table (테이블명) drop COLUMN (컬럼명); - 컬럼을 삭제 해준다

drop table (테이블명) - 테이블을 삭제해준다

drop user (유저명); - 유저를 삭제해준다(관리자계정이나 다른계정에서 삭제를 진행해야한다)
		(테이블이 존재하는 계정은 cascade를통해서만 삭제할수있다)

select * from all_users; - 등록된 모든 유저들을 볼수있다

[연산자] 

산술연산자)
+ 더하기
- 빼기
* 곱하기
/ 나누기(몫)
% 나머지

비교연산자)
a=b - 같다
a!=b - 같지않다
a<>b - 같지않다
a>b - a가 크다
a<b - b가 크다
a>=b - a가 크거나 같다
a<=b - b가 크거나 같다
a!<b - b가 더 크지 않다
a!>b - a가 더 크지 않다

논리연산자)
AND - WHERE절에서 모든 조건을 충족해야 TRUE값을 반환
ex) select * from student where kor>=50 and math>=90; 
국어점수가 50점이상이고 수학점수가 90점이상인 학생 출력

OR - WHERE절에서 하나의 조건만 충족해도 TRUE값을 반환
ex) select * from student where kor>=50 or math>=90;
국어점수가 50점 이상이거나 수학점수가 90점이상인 학생 출력

NOT - 논리연산자의 의미를 반전
ex) select * from student where not kor>=60;
국어점수가 60이상이 아닌 학생 출력

BETWEEN - 최소값과 최대값을 지정하고 그 범위내 있는 값을 검색 
ex) select * from student where kor between 80 and 100;
국어점수가 80점에서 100점사이인 학생 출력
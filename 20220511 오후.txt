[브런치(Branch)]

브런치 - 여러 개발자들이 동시에 작업을 할수있게 해주는 기능

	각자 독립적인 작업 영역 안에서 마음대로 소스코드를 변경할 수 있다

마스터 브런치 -     저장소를 처음 만들면, Git은 바로 'Master'라는 이름의 브런치를 생성한다.
	 	이 저장소에 새로운 파일을 추가 한다거나 추가한 파일의 내용을 변경하여 
		그 내용을 커밋(Commit)하는 것은 모두 마스터 브런치를 통해 처리할 수 있는 일이 된다.
	 	'Master'가 아닌 또 다른 새로운 브런치를 만들어서 체크아웃(checkout)하지 않는 이상,
		이 때의 모든 작업은 마스터 브런치에서 이루어진다.

merging - 같은 파일을 다른 브런치에서 작업하고 master에 merge 할때 충돌이 생긴다.
	이때 git status 를 하면 both modified: (파일명) 이 뜨고 
	master브런치에서 해당 파일을 확인했을 때 직접 수정해준 후 add와 커밋을 해주면 해결된다.

[브런치 명령어]

git branch - 브런치 리스트 확인

git branch (브런치명) - 브런치생성

git branch -d (브런치명) - 생성된 브런치 삭제

git checkout (브런치명) - 브런치 변경

git log --online --all - 현재 폴더안의 모든 리스트를 확인

git merge (브런치명) - 다른 브런치의 내용을 작업중인 현재 브런치에 합친다

git checkout -p (브런치명) - 변경된 파일 한개만 업데이트 해주면서 브런치를 변경

[파일 복구 명령어]

git reset --hard (커밋로그) - 입력한 커밋로그의 파일로 되돌아간다

gir revert (커밋로그) -  해당하는 커밋로그를 유지하고 되돌아간다
		     (2단계 이상의 로그를 건너뛰려면 직접 수정해야 한다)


[git-hub]

깃허브가 가지고있는 커밋의 로그 수 보다 현재 push하려는 로그 수 보다 많으면 push 할 수 없다.

git push -uf - 강제로 깃허브로 push 할수있다

git pull - 깃허브로부터 커밋로그를 받는다

